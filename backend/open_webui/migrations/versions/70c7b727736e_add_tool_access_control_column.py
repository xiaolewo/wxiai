"""add_tool_access_control_column

Revision ID: 70c7b727736e
Revises: 6fc1adfb106d
Create Date: 2025-08-18 12:08:37.435087

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import open_webui.internal.db


# revision identifiers, used by Alembic.
revision: str = "70c7b727736e"
down_revision: Union[str, None] = "6fc1adfb106d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 为 tool 表添加 access_control 列（安全检查）
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    if "tool" in inspector.get_table_names():
        existing_columns = [col["name"] for col in inspector.get_columns("tool")]

        if "access_control" not in existing_columns:
            with op.batch_alter_table("tool", schema=None) as batch_op:
                batch_op.add_column(
                    sa.Column("access_control", sa.JSON(), nullable=True)
                )
            print("Added access_control column to tool table")
        else:
            print("access_control column already exists in tool table")
    else:
        print("tool table does not exist, skipping access_control column addition")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 删除 tool 表的 access_control 列
    with op.batch_alter_table("tool", schema=None) as batch_op:
        batch_op.drop_column("access_control")

    # ### end Alembic commands ###
